{
  "api/Yort.LatitudePay.InStore.LatitudePayCreateRefundResponse.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayCreateRefundResponse.html",
    "title": "Class LatitudePayCreateRefundResponse | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayCreateRefundResponse Represents a response to a request to refund some or all of an accepted payment plan (via CreateRefundAsync(LatitudePayCreateRefundRequest) ). Inheritance Object LatitudePayCreateRefundResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayCreateRefundResponse Properties | Improve this Doc View Source CommissionAmount Gets or sets the fees charged to the retailer for this refund. Declaration [JsonProperty(\"commissionAmount\")] public decimal CommissionAmount { get; set; } Property Value Type Description Decimal The commission amount. | Improve this Doc View Source Reference Gets or sets the merchant reference for the refund as provided in the request. Declaration public string Reference { get; set; } Property Value Type Description String The reference. | Improve this Doc View Source RefundDate Gets or sets the date and time the refund was created. Declaration [JsonProperty(\"refundDate\")] public DateTime RefundDate { get; set; } Property Value Type Description DateTime The refund date. | Improve this Doc View Source RefundId Gets or sets the refund identifier generated by LatitudePay. Declaration [JsonProperty(\"refundId\")] public string RefundId { get; set; } Property Value Type Description String The refund identifier. See Also LatitudePayCreateRefundRequest CreateRefundAsync(LatitudePayCreateRefundRequest)"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayCurrencies.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayCurrencies.html",
    "title": "Class LatitudePayCurrencies | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayCurrencies Provides constants for currency codes known to be used by the LatitudePay API. Inheritance Object LatitudePayCurrencies Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public static class LatitudePayCurrencies Fields | Improve this Doc View Source AustralianDollars Returns \"AUD\" for Australian currency. Declaration public const string AustralianDollars = \"AUD\" Field Value Type Description String | Improve this Doc View Source NewZealandDollars Returns \"NZD\" for New Zealand currency. Declaration public const string NewZealandDollars = \"NZD\" Field Value Type Description String"
  },
  "api/Yort.LatitudePay.InStore.ILatitudePaySignatureGenerator.html": {
    "href": "api/Yort.LatitudePay.InStore.ILatitudePaySignatureGenerator.html",
    "title": "Interface ILatitudePaySignatureGenerator | Yort.LatitudePay.InStore",
    "keywords": "Interface ILatitudePaySignatureGenerator An interface for components that can calculate a signature for LatitudePay requests. Inherited Members IDisposable.Dispose() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public interface ILatitudePaySignatureGenerator : IDisposable Remarks This interface exists mostly for future expansion (in case the algorithm or hash used changes) and internal testing, it is not expected to be used directly from application code. Methods | Improve this Doc View Source GenerateSignature(String) Generates a signature for the specified payload. Declaration string GenerateSignature(string jsonPayload) Parameters Type Name Description String jsonPayload The json payload to calculate a signature for. Returns Type Description String See Also IDisposable"
  },
  "api/Yort.LatitudePay.InStore.LatitiudePayShippingLine.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitiudePayShippingLine.html",
    "title": "Class LatitiudePayShippingLine | Yort.LatitudePay.InStore",
    "keywords": "Class LatitiudePayShippingLine Represents a shipping charge as part of a LatitudePayCreatePosPurchaseRequest . Inheritance Object LatitiudePayShippingLine Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitiudePayShippingLine Properties | Improve this Doc View Source Carrier Gets or sets the name of carrier providing shipping services. Declaration [JsonProperty(\"carrier\")] public string Carrier { get; set; } Property Value Type Description String The carrier name. | Improve this Doc View Source Price Gets or sets the price charged to the customer for this shipping service on this payment plan. Declaration [JsonProperty(\"price\")] public LatitudePayMoney Price { get; set; } Property Value Type Description LatitudePayMoney The shipping price. | Improve this Doc View Source TaxIncluded Gets or sets a value indicating whether tax is included in the Price property. Declaration [JsonProperty(\"taxIncluded\")] public bool TaxIncluded { get; set; } Property Value Type Description Boolean true if Price is tax inclusive, else false . See Also LatitudePayCreatePosPurchaseRequest CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest)"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayCancelPurchaseResponse.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayCancelPurchaseResponse.html",
    "title": "Class LatitudePayCancelPurchaseResponse | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayCancelPurchaseResponse Represents the response to a request to cancel a pending payment plan (via CancelPurchaseAsync(LatitudePayCancelPurchaseRequest) ). Inheritance Object LatitudePayCancelPurchaseResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayCancelPurchaseResponse Properties | Improve this Doc View Source CancelledDate Gets or sets the date and time at which the plan was cancelled. Declaration [JsonProperty(\"cancelledDate\")] public DateTime CancelledDate { get; set; } Property Value Type Description DateTime The cancelled date. | Improve this Doc View Source Token Gets or sets the token of the payment plan to be cancelled. Declaration [JsonProperty(\"token\")] public string Token { get; set; } Property Value Type Description String The token. See Also CancelPurchaseAsync(LatitudePayCancelPurchaseRequest) LatitudePayClient LatitudePayCancelPurchaseResponse Token"
  },
  "api/Yort.LatitudePay.InStore.ILatitudePaySystemClock.html": {
    "href": "api/Yort.LatitudePay.InStore.ILatitudePaySystemClock.html",
    "title": "Interface ILatitudePaySystemClock | Yort.LatitudePay.InStore",
    "keywords": "Interface ILatitudePaySystemClock Interface for components that can return the current date and time. Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public interface ILatitudePaySystemClock Properties | Improve this Doc View Source Now Returns the current date and time as a DateTimeOffset value. Declaration DateTimeOffset Now { get; } Property Value Type Description DateTimeOffset"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayHMACSHA256SignatureGenerator.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayHMACSHA256SignatureGenerator.html",
    "title": "Class LatitudePayHMACSHA256SignatureGenerator | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayHMACSHA256SignatureGenerator Generates signatures for LatitudePay requests using HMACSHA256. Inheritance Object LatitudePayHMACSHA256SignatureGenerator Implements ILatitudePaySignatureGenerator IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public sealed class LatitudePayHMACSHA256SignatureGenerator : ILatitudePaySignatureGenerator, IDisposable Constructors | Improve this Doc View Source LatitudePayHMACSHA256SignatureGenerator(String) Initializes a new instance of the LatitudePayHMACSHA256SignatureGenerator class. Declaration public LatitudePayHMACSHA256SignatureGenerator(string apiSecret) Parameters Type Name Description String apiSecret The LatitudePay API secret. Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source GenerateSignature(String) Generates the signature for a string containing a LatitudePay request body in json format. Declaration public string GenerateSignature(string jsonPayload) Parameters Type Name Description String jsonPayload The json payload. Returns Type Description String A string containing the required signature. Remarks If jsonPayload is null or an empty string then null is returned as the signature. Exceptions Type Condition ObjectDisposedException Thrown if Dispose() has been called on this instance. Implements ILatitudePaySignatureGenerator System.IDisposable See Also ILatitudePaySignatureGenerator"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayCreatePosPurchaseRequest.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayCreatePosPurchaseRequest.html",
    "title": "Class LatitudePayCreatePosPurchaseRequest | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayCreatePosPurchaseRequest Represents a request to create a new payment plan. Inheritance Object LatitudePayCreatePosPurchaseRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayCreatePosPurchaseRequest Properties | Improve this Doc View Source BillingAddress Gets or sets the billing address for this payment plan. Optional. Declaration [JsonProperty(\"billingAddress\")] public LatitudePayAddress BillingAddress { get; set; } Property Value Type Description LatitudePayAddress The billing address. See Also LatitudePayAddress | Improve this Doc View Source Customer Gets or sets details about the customer the payment plan is for. Required (see remarks). Declaration [Required] [JsonProperty(\"customer\")] public LatitudePayCustomer Customer { get; set; } Property Value Type Description LatitudePayCustomer A LatitudePayCustomer containing details of the customer. Remarks You must provide a LatitudePayCustomer instance with the MobileNumber set, but providing additional details when known can speed the sign up process for new customers. | Improve this Doc View Source IdempotencyKey A value unique to this payment, but common to all CreatePosPurchaseRequests sent for this payment, to ensure the payment is created only once. Declaration [JsonIgnore] public string IdempotencyKey { get; set; } Property Value Type Description String Remarks This value is optional but highly recommended as without using it you cannot guarantee network problems and other issues won't lead to customers making payments the system doesn't know about. Set this property to a value that is unique for this *payment* but the same for each call to CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) for that payment. Any repeat requests using the same idempotency key value will return the original response without creating a second payment or sending the customer another message. If the original request never got processed (due to power failure, network outage etc) then the next request will be treated as the first one. This guarantees the customer gets one and only one request to make payment. | Improve this Doc View Source Products Gets or sets details of the items purchased with this payment plan. At least one valid LatitudePayProduct is required. Declaration [JsonProperty(\"products\")] public IEnumerable<LatitudePayProduct> Products { get; set; } Property Value Type Description IEnumerable < LatitudePayProduct > The products purchased. Remarks Note products collection may be enumerated multiple times as part of the validation and send processes, so should be a stable enumerable set and not a LINQ or dynamic query that might be subject to change or iterable only once. The product information is informative only (displayed to customer and merchant when viewing transaction in LatitudePay portals), it is not required for the value of items to total to the payment amount etc. See Also LatitudePayProduct | Improve this Doc View Source Reference A unique reference for this payment plan. Required. Declaration [Required] [JsonProperty(\"reference\")] public string Reference { get; set; } Property Value Type Description String The client generated reference for this payment plan. | Improve this Doc View Source ReturnUrls Gets or sets url's that will be used for callbacks when the payment plan changes status. Optional, can be null. Declaration [JsonProperty(\"returnUrls\")] public LatitudePayReturnUrls ReturnUrls { get; set; } Property Value Type Description LatitudePayReturnUrls The callback urls. | Improve this Doc View Source ShippingAddress Gets or sets the shipping address for products purchased with this payment plan. Optional. Declaration [JsonProperty(\"shippingAddress\")] public LatitudePayAddress ShippingAddress { get; set; } Property Value Type Description LatitudePayAddress The shipping address. See Also LatitudePayAddress | Improve this Doc View Source ShippingLines Gets or sets a collection of details about shipments paid for with this payment plan, if any. Optional. Declaration [JsonProperty(\"shippingLines\")] public IEnumerable<LatitiudePayShippingLine> ShippingLines { get; set; } Property Value Type Description IEnumerable < LatitiudePayShippingLine > The shipping lines. Remarks While you do not have to provide any shipping lines, this value cannot be null when sent to LatitudePay. If the value is left null, an empty array will be assigned for you when the request is sent. See Also LatitiudePayShippingLine | Improve this Doc View Source TaxAmount Gets or sets the amount of tax included in TotalAmount . Optional, can be set to zero for the currency of the payment. Declaration [JsonProperty(\"taxAmount\")] public LatitudePayMoney TaxAmount { get; set; } Property Value Type Description LatitudePayMoney The tax amount included in this payment plan. See Also TotalAmount LatitudePayMoney | Improve this Doc View Source TotalAmount Gets or sets the total amount. Must be a positive non-zero value. Declaration [Required] [JsonProperty(\"totalAmount\")] public LatitudePayMoney TotalAmount { get; set; } Property Value Type Description LatitudePayMoney The total amount. Remarks The amount specified here is the full amount charged as part of the payment plan. It does not have to match the sum of values from Products in the case of split payments or complex POS transactions. See Also LatitudePayMoney LatitudePayMoney See Also LatitudePayCreatePosPurchaseResponse"
  },
  "api/Yort.LatitudePay.InStore.html": {
    "href": "api/Yort.LatitudePay.InStore.html",
    "title": "Namespace Yort.LatitudePay.InStore | Yort.LatitudePay.InStore",
    "keywords": "Namespace Yort.LatitudePay.InStore Classes LatitiudePayShippingLine Represents a shipping charge as part of a LatitudePayCreatePosPurchaseRequest . LatitudePayAddress Represents a physical/postal address used for delivery/shipping or billing. LatitudePayApiException Thrown when an (HTTP) error response is received from the LatitudePay API. LatitudePayAuthToken Represents a token returned from the LatitudePay Authorization endpoint. LatitudePayAvailability Represents details of an available country & currency combination that can be used with the current LatitudePay account. LatitudePayCancelPurchaseRequest Represents a request to cancel a payment plan previously requested and not yet accepted or declined. LatitudePayCancelPurchaseResponse Represents the response to a request to cancel a pending payment plan (via CancelPurchaseAsync(LatitudePayCancelPurchaseRequest) ). LatitudePayClient The primary class used to integrate to the LatitudePay API. LatitudePayClientConfiguration Instances of this class represent configuration options for ILatitudePayClient instances. The static members of this class provide global configuration common to all instances. LatitudePayConfigurationRequest Represents the options available when requesting configuration information from the LatitudePay API. LatitudePayConfigurationResponse Represents the response from a GetConfigurationAsync(LatitudePayConfigurationRequest) call. LatitudePayConstants Contains constants for useful for dealing with the LatitudePay API. LatitudePayCreatePosPurchaseRequest Represents a request to create a new payment plan. LatitudePayCreatePosPurchaseResponse Represents a response from a CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) request. LatitudePayCreateRefundRequest Represents a request to refund some or all of an accepted payment plan. LatitudePayCreateRefundResponse Represents a response to a request to refund some or all of an accepted payment plan (via CreateRefundAsync(LatitudePayCreateRefundRequest) ). LatitudePayCurrencies Provides constants for currency codes known to be used by the LatitudePay API. LatitudePayCustomer Represents a customer as part of a LatitudePayCreatePosPurchaseRequest . LatitudePayHMACSHA256SignatureGenerator Generates signatures for LatitudePay requests using HMACSHA256. LatitudePayProduct Represents details of an item purchased via a LatitudePayCreatePosPurchaseRequest . LatitudePayPurchaseStatusRequest Represents a request to obtain the status of a payment plan created via CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) . LatitudePayPurchaseStatusResponse Represents the status of a payment plan as returned by a GetPurchaseStatusAsync(LatitudePayPurchaseStatusRequest) request. LatitudePayReturnUrls Provides a set of URLs to be called by LatitudePay as the payment plan changes status. LatitudePaySystemClock Represents the default system clock used by the Yort.LatitudePay.Instore library to retrieve the current date and time. Structs LatitudePayMoney Represents a monetary or financial value in the LatitudePay API as a tuple containing a numeric value and a string representing the associated currency. Interfaces ILatitudePayClient Interface for the ILatitudePayClient , provided to make testing via mocks/stubs etc. easier. ILatitudePaySignatureGenerator An interface for components that can calculate a signature for LatitudePay requests. ILatitudePaySystemClock Interface for components that can return the current date and time. Enums LatitudePayEnvironment A enum providing a list of environments for the LatitudePay API."
  },
  "api/Yort.LatitudePay.InStore.LatitudePayProduct.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayProduct.html",
    "title": "Class LatitudePayProduct | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayProduct Represents details of an item purchased via a LatitudePayCreatePosPurchaseRequest . Inheritance Object LatitudePayProduct Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayProduct Properties | Improve this Doc View Source Name Gets or sets the name/description of the product. Required. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description String The name. | Improve this Doc View Source Price Gets or sets the unit price of the product. Cannot be a negative value. Declaration [JsonProperty(\"price\")] public LatitudePayMoney Price { get; set; } Property Value Type Description LatitudePayMoney The price. | Improve this Doc View Source Quantity Gets or sets the quantity of this item purchased. Must be a positive value greater than zero. Declaration [JsonProperty(\"quantity\")] public int Quantity { get; set; } Property Value Type Description Int32 The quantity. | Improve this Doc View Source Sku Gets or sets the SKU of the item. Optional. Declaration [JsonProperty(\"sku\")] public string Sku { get; set; } Property Value Type Description String The sku. | Improve this Doc View Source TaxIncluded Gets or sets a value indicating whether Price is inclusive of tax. Declaration [JsonProperty(\"taxIncluded\")] public bool TaxIncluded { get; set; } Property Value Type Description Boolean true if tax is included in Price ; otherwise, false . See Also LatitudePayClient CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) LatitudePayCreatePosPurchaseRequest"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayReturnUrls.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayReturnUrls.html",
    "title": "Class LatitudePayReturnUrls | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayReturnUrls Provides a set of URLs to be called by LatitudePay as the payment plan changes status. Inheritance Object LatitudePayReturnUrls Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayReturnUrls Remarks LatitudePay with make HTTP GET requests to any callback provided, with query string arguments for details of the payment plan and status associated. Also included should be a Signature query argument that can be used to verify the callback came from LatitudePay and is not malicious. Properties | Improve this Doc View Source CallbackUrl Gets or sets a URL to call approximately 10 seconds after the initial callback, as a backup notification in case the first is missed. Declaration [JsonProperty(\"callbackUrl\")] public Uri CallbackUrl { get; set; } Property Value Type Description Uri The callback URL. | Improve this Doc View Source FailUrl Gets or sets the URL to call when the payment plan is declined or cancelled.. Declaration [JsonProperty(\"failUrl\")] public Uri FailUrl { get; set; } Property Value Type Description Uri The fail URL. | Improve this Doc View Source SuccessUrl Gets or sets the URL to call when the payment plan is approved. Declaration [JsonProperty(\"successUrl\")] public Uri SuccessUrl { get; set; } Property Value Type Description Uri The success URL."
  },
  "api/Yort.LatitudePay.InStore.LatitudePaySystemClock.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePaySystemClock.html",
    "title": "Class LatitudePaySystemClock | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePaySystemClock Represents the default system clock used by the Yort.LatitudePay.Instore library to retrieve the current date and time. Inheritance Object LatitudePaySystemClock Implements ILatitudePaySystemClock Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public sealed class LatitudePaySystemClock : ILatitudePaySystemClock Remarks This implementation simply wraps the Now property and relies on the underlying system clock for accuracy. This class has a private constructor and cannot be created by user code. To obtain and instance use the static DefaultInstance property. Properties | Improve this Doc View Source DefaultInstance Returns an instance of this clock. Declaration public static LatitudePaySystemClock DefaultInstance { get; } Property Value Type Description LatitudePaySystemClock Remarks The instance returned by this method is cached after the first call to reduce allocations, so all subsquent calls will receive the same shared instance. However the property is not thread-safe and two threads calling the method simultanously for the first time may receive different instances. This should not cause a problem as clients should not (and are instructed not to) compare instances or rely on shared instances. | Improve this Doc View Source Now Returns the current date and time from the system clock. Declaration public DateTimeOffset Now { get; } Property Value Type Description DateTimeOffset Implements ILatitudePaySystemClock"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayApiException.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayApiException.html",
    "title": "Class LatitudePayApiException | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayApiException Thrown when an (HTTP) error response is received from the LatitudePay API. Inheritance Object Exception LatitudePayApiException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax [Serializable] public class LatitudePayApiException : Exception, ISerializable Constructors | Improve this Doc View Source LatitudePayApiException() Default constructor. Declaration public LatitudePayApiException() | Improve this Doc View Source LatitudePayApiException(SerializationInfo, StreamingContext) Deserialisation constructor. Declaration protected LatitudePayApiException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context | Improve this Doc View Source LatitudePayApiException(String) Partial constructor. Declaration public LatitudePayApiException(string message) Parameters Type Name Description String message The error message to associated with this exception. | Improve this Doc View Source LatitudePayApiException(String, Exception) Partial constructor. Declaration public LatitudePayApiException(string message, Exception inner) Parameters Type Name Description String message The error message to associated with this exception. Exception inner The exception wrapped by this exception. | Improve this Doc View Source LatitudePayApiException(String, Int32) Recommended constructor. Declaration public LatitudePayApiException(string message, int statusCode) Parameters Type Name Description String message The error message returned by the LatitudePay API. Int32 statusCode The HTTP status code returned by the LatitudePay API. Properties | Improve this Doc View Source StatusCode Returns the HTTP status code associated with this exception, if any, otherwise -1. Declaration public int StatusCode { get; } Property Value Type Description Int32 Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Yort.LatitudePay.InStore.ILatitudePayClient.html": {
    "href": "api/Yort.LatitudePay.InStore.ILatitudePayClient.html",
    "title": "Interface ILatitudePayClient | Yort.LatitudePay.InStore",
    "keywords": "Interface ILatitudePayClient Interface for the ILatitudePayClient , provided to make testing via mocks/stubs etc. easier. Inherited Members IDisposable.Dispose() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public interface ILatitudePayClient : IDisposable Methods | Improve this Doc View Source CancelPurchaseAsync(LatitudePayCancelPurchaseRequest) Cancels a (pending) payment plan previously requested via CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) . Declaration Task<LatitudePayCancelPurchaseResponse> CancelPurchaseAsync(LatitudePayCancelPurchaseRequest request) Parameters Type Name Description LatitudePayCancelPurchaseRequest request A LatitudePayCancelPurchaseRequest containing the token of the payment plan to cancel. Returns Type Description Task < LatitudePayCancelPurchaseResponse > An instance of a LatitudePayCancelPurchaseResponse indicating if the cancellation was successful. Remarks This only cancels pending/unapproved payment plans. If a plan has been accepted/approved you must refund it instead of cancel it. See Also CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) CreateRefundAsync(LatitudePayCreateRefundRequest) | Improve this Doc View Source CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) Creates a new 'payment plan'. Declaration Task<LatitudePayCreatePosPurchaseResponse> CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest request) Parameters Type Name Description LatitudePayCreatePosPurchaseRequest request A LatitudePayCreatePosPurchaseRequest instance specifying options for the payment plan to be created. Returns Type Description Task < LatitudePayCreatePosPurchaseResponse > A LatitudePayCreatePosPurchaseResponse instance containing details of the pending payment plan. See Also GetPurchaseStatusAsync(LatitudePayPurchaseStatusRequest) CancelPurchaseAsync(LatitudePayCancelPurchaseRequest) CreateRefundAsync(LatitudePayCreateRefundRequest) | Improve this Doc View Source CreateRefundAsync(LatitudePayCreateRefundRequest) Refunds a previously approved payment plan. Declaration Task<LatitudePayCreateRefundResponse> CreateRefundAsync(LatitudePayCreateRefundRequest request) Parameters Type Name Description LatitudePayCreateRefundRequest request A LatitudePayCreateRefundRequest instance containing details of the refund and payment plan to refund against. Returns Type Description Task < LatitudePayCreateRefundResponse > A LatitudePayCreateRefundResponse instance indicating if the refund was successful and details of the refund created. Remarks You can only refund a previously accepted payment plan. Use CancelPurchaseAsync(LatitudePayCancelPurchaseRequest) to cancel a payment plan that is pending. A refund can be full or partial, and multiple partial refunds can be made. You can only refund up to the total amount of the original payment plan, across all refunds. | Improve this Doc View Source GetConfigurationAsync(LatitudePayConfigurationRequest) Gets configuration information for the current merchant account, specifying the supported currency, minimum and maximum purchase values etc. Declaration Task<LatitudePayConfigurationResponse> GetConfigurationAsync(LatitudePayConfigurationRequest request) Parameters Type Name Description LatitudePayConfigurationRequest request A LatitudePayConfigurationRequest that specifies options for the data returned. Returns Type Description Task < LatitudePayConfigurationResponse > A LatitudePayConfigurationResponse instance. | Improve this Doc View Source GetPurchaseStatusAsync(LatitudePayPurchaseStatusRequest) Gets the status of a payment plan previously requested via CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) . Declaration Task<LatitudePayPurchaseStatusResponse> GetPurchaseStatusAsync(LatitudePayPurchaseStatusRequest request) Parameters Type Name Description LatitudePayPurchaseStatusRequest request A LatitudePayPurchaseStatusRequest instance containing the token of the payment plan who's status should be queried. Returns Type Description Task < LatitudePayPurchaseStatusResponse > A LatitudePayPurchaseStatusResponse instance containing the status and other details of the plan. See Also CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) CancelPurchaseAsync(LatitudePayCancelPurchaseRequest) See Also IDisposable"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayConstants.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayConstants.html",
    "title": "Class LatitudePayConstants | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayConstants Contains constants for useful for dealing with the LatitudePay API. Inheritance Object LatitudePayConstants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public static class LatitudePayConstants Fields | Improve this Doc View Source LatitudePayV3ContentType Returns the content-type to use for HTTP requests to the LatitudePay API for version 3 content entities. Declaration public const string LatitudePayV3ContentType = \"application/com.latitudepay.ecom-v3.0+json\" Field Value Type Description String | Improve this Doc View Source ProductionRootUrl Returns a string containing the root url for the live/production LatitudePay API. Declaration public const string ProductionRootUrl = \"https://api.latitudepay.com\" Field Value Type Description String | Improve this Doc View Source StatusApproved The status of a payment plan that has been approved by the customer and payment processor. Declaration public const string StatusApproved = \"APPROVED\" Field Value Type Description String | Improve this Doc View Source StatusDeclined The status of a payment plan that has been cancelled or declined for some reason (i.e insufficient funds). Declaration public const string StatusDeclined = \"DECLINED\" Field Value Type Description String | Improve this Doc View Source StatusPending The status of a payment plan that has been requested but not yet approved or declined. Declaration public const string StatusPending = \"PENDING\" Field Value Type Description String | Improve this Doc View Source UatRootUrl Returns a string containing the root url for the UAT/sandbox/test LatitudePay API. Declaration public const string UatRootUrl = \"https://api.uat.latitudepay.com\" Field Value Type Description String"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayCreateRefundRequest.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayCreateRefundRequest.html",
    "title": "Class LatitudePayCreateRefundRequest | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayCreateRefundRequest Represents a request to refund some or all of an accepted payment plan. Inheritance Object LatitudePayCreateRefundRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayCreateRefundRequest Properties | Improve this Doc View Source Amount Gets or sets the amount of this refund. Must be a positive non-zero value. Declaration [Required] [JsonProperty(\"amount\")] public LatitudePayMoney Amount { get; set; } Property Value Type Description LatitudePayMoney The amount. | Improve this Doc View Source IdempotencyKey A value unique to this refund, but common to all CreateRefundRequest sent for this payment, to ensure the refund is created only once. Declaration [JsonIgnore] public string IdempotencyKey { get; set; } Property Value Type Description String Remarks This value is optional but highly recommended as without using it you cannot guarantee network problems and other issues won't lead to duplicate refunds. Set this property to a value that is unique for this *refund* but the same for each call to CreateRefundAsync(LatitudePayCreateRefundRequest) for that refund. Any repeat requests using the same idempotency key value will return the original response without creating a second refund. If the original request never got processed (due to power failure, network outage etc) then the next request will be treated as the first one. This guarantees one and only one refund is created. | Improve this Doc View Source PaymentPlanToken Gets or sets the token of the payment plan to refund against. Required. Declaration [Required] [JsonIgnore] public string PaymentPlanToken { get; set; } Property Value Type Description String The payment plan token. | Improve this Doc View Source Reason Gets or sets a descriptive reason for the refund. Declaration [JsonProperty(\"reason\")] public string Reason { get; set; } Property Value Type Description String The reason. | Improve this Doc View Source Reference Gets or sets the merchants unique reference for this refund. Required. Declaration [JsonProperty(\"reference\")] public string Reference { get; set; } Property Value Type Description String The reference. See Also LatitudePayCreateRefundResponse CreateRefundAsync(LatitudePayCreateRefundRequest)"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayCancelPurchaseRequest.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayCancelPurchaseRequest.html",
    "title": "Class LatitudePayCancelPurchaseRequest | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayCancelPurchaseRequest Represents a request to cancel a payment plan previously requested and not yet accepted or declined. Inheritance Object LatitudePayCancelPurchaseRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayCancelPurchaseRequest Properties | Improve this Doc View Source PaymentPlanToken Gets or sets the payment token of the plan to be cancelled. Required. Declaration public string PaymentPlanToken { get; set; } Property Value Type Description String The payment plan token. See Also CancelPurchaseAsync(LatitudePayCancelPurchaseRequest) LatitudePayClient LatitudePayCancelPurchaseResponse Token"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayMoney.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayMoney.html",
    "title": "Struct LatitudePayMoney | Yort.LatitudePay.InStore",
    "keywords": "Struct LatitudePayMoney Represents a monetary or financial value in the LatitudePay API as a tuple containing a numeric value and a string representing the associated currency. Implements IEquatable < LatitudePayMoney > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public struct LatitudePayMoney : IEquatable<LatitudePayMoney> Remarks This is an immutable value type. To set the value or currency you must use the LatitudePayMoney(Decimal, String) constructor. Instances created using the default construtor will return a zero value with the Currency property returning the value of NewZealandDollars . //Assuming you have an variable called payment with a 'value' property containing the decimal amount //you want to send. var amount = new LatitudePayMoney(Math.Round(payment.Value, 2)); //This sample uses a literal value for illustration purposes var amount = new LatitudePayMoney(Math.Round(99.9900, 2));</code></pre> Constructors | Improve this Doc View Source LatitudePayMoney(Decimal) Constructs a new instance using the specified amount and currency. Declaration public LatitudePayMoney(decimal amount) Parameters Type Name Description Decimal amount A decimal value indicating the numeric value of this monetary value. This value should be rounded to the appropriate number of decimal places associated with the currency specified by Currency . Remarks This constructor uses the DefaultCurrency value for the Currency property of this instance. If DefaultCurrency is null or empty string then AustralianDollars will be used. | Improve this Doc View Source LatitudePayMoney(Decimal, String) Constructs a new instance using the specified amount and currency. Declaration public LatitudePayMoney(decimal amount, string currency) Parameters Type Name Description Decimal amount A decimal value indicating the numeric value of this monetary value. This value should be rounded to the appropriate number of decimal places associated with the currency specified by Currency . String currency A three chracter string that identifies the currency this monetary value is in. Exceptions Type Condition ArgumentNullException Thrown if currency is null. ArgumentException Thrown if currency is an empty string or contains only whitespace, or has a length other than 3. Properties | Improve this Doc View Source Amount Returns the numeric amount of this monetary value in the currency specified by Currency . Declaration [JsonProperty(\"amount\")] public decimal Amount { get; } Property Value Type Description Decimal Remarks This value should be rounded to the appropriate number of decimal places associated with the currency specified by Currency . See Also Currency | Improve this Doc View Source Currency Specifies the currency of the Amount / Declaration [Required] [JsonProperty(\"currency\")] public string Currency { get; } Property Value Type Description String See Also Amount Methods | Improve this Doc View Source Equals(Object) Compares this instance to an object value and returns true if they are both LatitudePayMoney instances that are considered equal, otherwise false. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The other value to comnpare to. Returns Type Description Boolean True if obj is considered equal to this instance. Overrides ValueType.Equals(Object) Remarks If obj is null or not an instance of LatitudePayMoney then false is returned, otherwise the result of Equals(LatitudePayMoney) is returned. | Improve this Doc View Source Equals(LatitudePayMoney) Returns true if this instance is considered equal to other , otherwise returns false. Declaration public bool Equals(LatitudePayMoney other) Parameters Type Name Description LatitudePayMoney other The other instance to compare to. Returns Type Description Boolean True if the two instances are considered equal. Remarks Equality is determined by comparing the Amount properties for an exact match and the Currency properties for an ordinal, case-insensitive match. | Improve this Doc View Source GetHashCode() Returns the hashcode for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A integer that is the hashcode for this instance. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns the Amount property formatted as a currency using the current thread culture (which may or may not match the currency defined by Currency ). Declaration public override string ToString() Returns Type Description String A string containing the formatted amount. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(LatitudePayMoney, LatitudePayMoney) Performs equality checking on LatitudePayMoney instances. Declaration public static bool operator ==(LatitudePayMoney value1, LatitudePayMoney value2) Parameters Type Name Description LatitudePayMoney value1 A LatitudePayMoney instance. LatitudePayMoney value2 A LatitudePayMoney instance. Returns Type Description Boolean True if the instances are equal, otherwise false. Remarks Equality is determined by comparing the Amount properties for an exact match and the Currency properties for an ordinal, case-insensitive match. | Improve this Doc View Source Inequality(LatitudePayMoney, LatitudePayMoney) Performs inequality checking on LatitudePayMoney instances. Declaration public static bool operator !=(LatitudePayMoney value1, LatitudePayMoney value2) Parameters Type Name Description LatitudePayMoney value1 A LatitudePayMoney instance. LatitudePayMoney value2 A LatitudePayMoney instance. Returns Type Description Boolean True if the instances are not equal, otherwise false. Remarks Inverts the result of an == comparison. Implements System.IEquatable<T> See Also LatitudePayCurrencies"
  },
  "articles/quickstart.html": {
    "href": "articles/quickstart.html",
    "title": "Yort.LatitudePay.InStore Quick Start | Yort.LatitudePay.InStore",
    "keywords": "Yort.LatitudePay.InStore Quick Start Creating a Payment Plan (Taking Payment) Basic Process Create an instance of LatitudePayClient Call LatitudePayClient.CreatePosPurchaseAsync If the response from of step 2 returns a response with a PaymentPlanToken, use LatitudePayClient.GetPurchaseStatusAsync to poll at five seconds (or longer) intervals until an accepted, declined or CancelPurchaseAsyncled status is reached. Prior to the payment request being accepted, declined or CancelPurchaseAsyncled LatitudePay will return a status of pending . Handle any transient errors thrown from the polling request. If you decide to timeout/give up polling, call LatitudePayClient.CancelPurchaseAsync . A status of Approved means the payment is successfully completed, and you need to record the PaymentPlanToken somewhere if you want to be able to process refunds in the future. A status of Declined means the payment was cancelled or failed (i.e due to insufficient credit). NB This is only a simple/demo implementation. A production quality implementation needs much more robust logic to handle power failure/crash/network outages and other problems. Add the Nuget package Install the Nuget package; PM> Install-Package Yort.LatitudePay.InStore [ ] Full Code Sample A full (demo quality) code sample for creating payment, with minimum comments/noise. See the following sections for a breakdown of what's going on and why. ILatitudePayClient client = new LatitudePayClient ( new LatitudePayClientConfiguration(\"YourApiKey\", \"YourClientSecret\", LatitudePayEnvironment.Uat) ); // This is a minimal request, but providing other optional details on the request // may help first time users sign up/get approved more quickly and/or provide // a better experience within the LatitudePay portal. var request = new LatitudePayCreatePosPurchaseRequest() { Reference = System.Guid.NewGuid().ToString(), Customer = new LatitudePayCustomer() { MobileNumber = \"025555555\" // You need to specify the (customer's) mobile number to send the payment request to }, Products = new LatitudePayProduct[] { new LatitudePayProduct() { Name = \"Test\", Price = new LatitudePayMoney(35.5M, \"NZD\"), Quantity = 1, Sku = \"Test\" } }, // LatitudePay requires at least one item specified TaxAmount = new LatitudePayMoney(0M, \"NZD\"), TotalAmount = new LatitudePayMoney(35.5M, \"NZD\") }; request.IdempotencyKey = request.Reference; //Set this to the same value for each request for *this* payment (in the case of retries/crash recovery) to ensure duplicate payments aren't requested. LatitudePayCreatePosPurchaseResponse result = await client.CreatePosPurchaseAsync(request); //Wait until payment enters final status var statusRequest = new LatitudePayPurchaseStatusRequest() { PaymentPlanToken = purchaseResponse.Token }; var finalStatus = false; LatitudePayPurchaseStatusResponse paymentStatus = null; while (!finalStatus) { await Task.Delay(5000).ConfigureAwait(false); //LatitudePay says you should wait 5 seconds between status polls. paymentStatus = await client.GetPurchaseStatusAsync(statusRequest).ConfigureAwait(false); finalStatus = !String.Equals(paymentStatus.Status, LatitudePayConstants.StatusPending, StringComparison.OrdinalIgnoreCase); } if (paymentStatus.Status == LatitudePayConstants.StatusApproved) { //The payment is approved, store the purchaseResponse.Token somewhere so it can be used for refunds in future if required. } else if (paymentStatus.Status == LatitudePayConstants.StatusDeclined) { //The payment is declined, get the operator to try again or take some other form of payment etc. } Configure and Create A LatitudePayClient Instance The LatitudePayClient is the main class in this library to use for accessing the LatitudePay API functionality. To create an instance first you must create a LatitudePayClientConfiguration object that tells the client how to behave. This sample configures a client for accessing the sandbox/text version of the API. You'll need an api key and secret issued by LatitudePay for the sandbox environment for this to work. Normally you would create the LatitudePay instance on start-up or first use, and then re-use it across requests instead of creating a new one each time. This allows HTTP connection pooling and improves performance. The LatitudePayClient instance is thread-safe in so much as you can run multiple requests through the same instance for different payments from different threads. //LatitudePay will issue a client id and secret for each environment, //you need to contact LatitudePay to get these. var config = new LatitudePayClientConfiguration ( \"YourApiKey\", \"YourClientSecret\", LatitudePayEnvironment.Uat) ); //We use ILatitudePayClient as the type for the variable holding //the LatitudePayClient instance here as it makes it easier if we //want a test implementation later. ILatitudePayClient client = new LatitudePayClient(config); Call Create POS Purchase Now we can create an payment plan. Create a LatitudePayCreatePosPurchaseRequest with details of the payment to take, and pass it to the LatitudePayClient.CreatePosPurchaseAsync method. //We'll set the minimum required properties for this example var request = new LatitudePayCreatePosPurchaseRequest() { Reference = System.Guid.NewGuid().ToString(), Customer = new LatitudePayCustomer() { MobileNumber = \"025555555\" }, Products = new LatitudePayProduct[] { new LatitudePayProduct() { Name = \"Test\", Price = new LatitudePayMoney(35.5M, \"NZD\"), Quantity = 1, Sku = \"Test\" } }, TaxAmount = new LatitudePayMoney(0M, \"NZD\"), TotalAmount = new LatitudePayMoney(35.5M, \"NZD\") }; request.IdempotencyKey = request.Reference; //Set this to the same value for each request for *this* payment (in the case of retries/crash recovery) to ensure duplicate payments aren't requested. //Note, this method could throw exceptions. Production quality code //would handle them appropriately. LatitudePayCreatePosPurchaseResponse result = await client.CreatePosPurchaseAsync(request); Poll for Status Now we need to wait for the customer to approve or decline the payment request via the LatitudePay app or website. If they approve the payment then it will be sent by LatitudePay to the payment processor, and if the payment processor accepts then we'll get a completed status. If either the customer or the payment processor declines the response we'll get a CancelPurchaseAsync/declined or error response. // Create a status request. You can create a new one on each loop or // reuse the same one, which is more efficient so that's what we do here. // Unfortunately the LatitudePay status endpoint doesn't use the merchant reference, but // instead the payment plan token returned by the initial create request. If that initial // request is interrupted by a crash, power failure, timeout/network error etc. // you must retry it with duplicate checking enabled until such time as you // receive an payment plan token you can status check against. var statusRequest = new LatitudePayPurchaseStatusRequest() { PaymentPlanToken = result.Token }; //Production quality code would also have a timeout, in case the user //is unable to approve or cancel the payment plan in a timely fashion at //the till. There should also be an option for the operator to manually //cancel, in the case where the payment amount has been incorrectly entered //or the consumer is unable to cancel themselves. //Wait until payment enters final status var statusRequest = new LatitudePayPurchaseStatusRequest() { PaymentPlanToken = purchaseResponse.Token }; var finalStatus = false; LatitudePayPurchaseStatusResponse paymentStatus = null; while (!finalStatus) { await Task.Delay(5000).ConfigureAwait(false); //LatitudePay says you should wait 5 seconds between status polls. paymentStatus = await client.GetPurchaseStatusAsync(statusRequest).ConfigureAwait(false); finalStatus = !String.Equals(paymentStatus.Status, LatitudePayConstants.StatusPending, StringComparison.OrdinalIgnoreCase); } if (paymentStatus.Status == LatitudePayConstants.StatusApproved) { //The payment is approved, store the purchaseResponse.Token somewhere so it can be used for refunds in future if required. } else if (paymentStatus.Status == LatitudePayConstants.StatusDeclined) { //The payment is declined, get the operator to try again or take some other form of payment etc. } CancelPurchaseAsyncling a Payment Plan To cancel a LatitudePay payment plan that is still pending approval (not accepted or declined) you will need the PaymentPlanToken returned in the LatitudePayCreatePosPurchaseResponse . CancelPurchaseAsync is successful if the CancelPurchaseAsync method does not throw an exception. The LatitudePayCancelPurchaseRequest instance returned will contain the payment plan token and cancellation date as confirmation. try { var cancelRequest = new LatitudePayCancelPurchaseRequest() { PaymentPlanToken = createPlanResult.Token }; var cancelResponse = await client.CancelPurchaseAsync(cancelRequest); //Cancellation succeeded } catch (Exception) // Production code should catch specific exception types { //CancelPurchaseAsync failed } Refunding a Payment Plan Once an payment plan has been approved you can make one or more refunds against it, up to the total value of the original payment plan. For each refund create a LatitudePayCreateRefundRequest, specify the payment plan token that was returned when the payment was created, the refund amount and a unique reference for the refund request. Ensure the IdempotentKey is set to a value unique to this refund but common to all retry requests (using the merchant reference for the IdempotentKey is often a good idea). If you get interrupted (power failure, crash, network outage) or suffer a transient error sending a refund, resend the same request again (with the same IdempotentKey value) until you get a valid response. Using the same IdempotentKey value on the retry requests should prevent multiple refunds being created if the earlier attempts did actually succeed. var refundRequest = new LatitudePayCreateRefundRequest() { PaymentPlanToken = purchaseResponse.Token, Amount = request.TotalAmount, Reason = \"Test refund\", Reference = System.Guid.NewGuid().ToString() }; try { var refundResponse = await client.CreateRefundAsync(refundRequest); //Refund succeeded, refundResponse.RefundId will contain the id of the new refund. } catch (Exception) // Production code should catch specific exception types { //Refund failed }"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Yort.LatitudePay.InStore Documentation | Yort.LatitudePay.InStore",
    "keywords": "Yort.LatitudePay.InStore Documentation Quick Start Production Implementation Requirements Api Reference Official LatitudePay API documentation"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction | Yort.LatitudePay.InStore",
    "keywords": "Introduction This library is a thin/light weight OOP wrapper around the LatitudePay API . It provides a clean OOP style interface and saves you having to do generate your own models, make HTTP calls, serialise/deserialise requests and responses and so on. It doesn't add any retry logic, persistent stores or reliability handling. It is still up to the application developer to provide a robust implementation . This library only implements the in-store related API endpoints and does not implement e-commerce flows."
  },
  "articles/productionrequirements.html": {
    "href": "articles/productionrequirements.html",
    "title": "Production Implementation Requirements | Yort.LatitudePay.InStore",
    "keywords": "Production Implementation Requirements In order to provide a production quality integration with LatitudePay the application developer must undertake a number of steps. Power Failure/Crash Recovery A reliable integration must handle situation where the POS process dies while a LatitudePay order (or refund) is pending, due to a power/hardware failure, OS restart, bug etc. In this case the usual pattern is: * On start-up, or another suitable event, check a persistent store for a list of outstanding requests. For each pending request, recover at least the MerchantReference , and preferably the order id (if it was received and persisted from the initial CreateOrder request). Ensure the merchant reference is used for both the payment reference AND the IdempotentKey value of the create request. * If you are only able to retrieve the merchant reference, retry the order create request ensuring the IdempotentKey is again set to the merchant reference. This will ensure that even if the original request was actually processed by the LatitudePay servers, a second payment won't be created, instead a copy of the original response containing the PaymentPlanToken required for the following steps will be returned. * If a pending order is found, begin polling for the status of that order. If the order is still pending after the first check either continue polling or cancel immediately. When a final state is reached the POS should relate this answer back to the pending POS transaction, provide some way for the user to apply it to a new transaction or perform an automatic refund depending on how the POS is designed. * If a pending refund is found, retry the refund request using the same merchant reference and IdempotentKey value as on the original refund request, if you want to ensure the refund occurred. Using the IdempotentKey value like this and sending the same request again will only result in at most one refund being applied. * Before sending a create pos purchase or create refund request, generate a unique MerchantReference to be used on that request and save it to persistent storage so it can be used for crash recovery (see above). For a CreateOrderRequest also store the order id returned as soon as possible if the call is successful. * When a POS transaction is completed (or next persisted to permanent storage) with an order or refund that has reached a final status, remove that requests reference from the persistent store of pending requests so it will no longer be rechecked on a restart (see previous steps). Error Handling All methods in the LatitudePayClient class might throw exceptions. Some exceptions such as System.ArgumentException and System.ArgumentNullException occur before the request is sent, if the request data doesn't meet the minimum known requirements for LatitudePay. These should be handled probably presented to the user to tell them what is missing. In addition, any error normally thrown by the .Net HttpClient class including System.TaskCanceledException and HttpRequestException could be re-thrown from these methods. TaskCanceled and timeout exceptions may require special handling. For example if these exceptions are thrown during a create pos purchase and the POS is not going to try again then another call should be made to CancelPurchase to ensure the order is not subsequently accepted by the user. HttpResponseExceptions may indicate a transient error, such as the network being briefly down, or a service unavailable/too many requests response from the server. In this case the POS should wait a short period and then retry the operation. Any error returned by the LatitudePay API (indicating the HTTP call was received by the server but resulted in an error) is converted to a LatitudePayApiException. This has an error message and the http status code returned by the API. Polling Timeout It's possible that due to a long network outage or similar problem that a create order request may never reach an approved or declined state and cannot be immediately cancelled. In this case the POS should have a timeout where it gives up polling. This timeout should not be too short, or should prompt the operator to ask if it should give up, as new customers can sometimes take several minutes to complete the sign up process. It is up to the POS to decide how to behave, but the usual logic is: Treat the request as declined Store the request somewhere to be rechecked at a later time when the network is available again. If the customer still wants to make payment they will have to choose another payment method (since the network is not available and LatitudePay cannot be used) On recheck (once the network is available again): If the payment is pending, cancel it. If the payment is approved, refund it. If the payment is cancelled or declined, there is nothing to do except remove it from the list of rechecks Manual Cancellation It is possible the POS operator may need to cancel an in-progress payment, if the end consumer is unable to do so for some reason. It's also possible the customer's device may run out of battery, have no network connection to receive the payment request, or get dropped and damaged etc. In any of these cases where the payment cannot be processed for a known reason the POS user should have the option to manually cancel the request without waiting for a long timeout. This needs to use the CancelPurchase method of the LatitudePayClient object to notify LatitudePay of the cancellation, and only treat the payment as cancelled if the cancellation request is successful. Cancelling Orders When making a CancelPurchase request an exception might be thrown, and this could be caused by the order having been approved or declined between when you last performed a status check and when the cancellation request was received. If an LatitudePayApiException is thrown as the result of a cancellation request your code should re-check the current status of the order and take action depending on the latest status."
  },
  "api/Yort.LatitudePay.InStore.LatitudePayCustomer.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayCustomer.html",
    "title": "Class LatitudePayCustomer | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayCustomer Represents a customer as part of a LatitudePayCreatePosPurchaseRequest . Inheritance Object LatitudePayCustomer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayCustomer Properties | Improve this Doc View Source Address Gets or sets the physical/postal address of the customer. Declaration [JsonProperty(\"address\")] public LatitudePayAddress Address { get; set; } Property Value Type Description LatitudePayAddress The address. | Improve this Doc View Source DateOfBirth Gets or sets the birth date of the customer. Declaration [JsonProperty(\"dateOfBirth\")] public DateTime? DateOfBirth { get; set; } Property Value Type Description Nullable < DateTime > The date of birth. | Improve this Doc View Source Email Gets or sets the email address of the customer. Declaration [JsonProperty(\"email\")] public string Email { get; set; } Property Value Type Description String The email. | Improve this Doc View Source FirstName Gets or sets the first name of the customer. Declaration [JsonProperty(\"firstName\")] public string FirstName { get; set; } Property Value Type Description String The first name. | Improve this Doc View Source MobileNumber Gets or sets the mobile number of the customer. Declaration [Required] [JsonProperty(\"mobileNumber\")] public string MobileNumber { get; set; } Property Value Type Description String The mobile number. Remarks Required as this is used to send the customer an SMS message prompting them to approve the payment plan. | Improve this Doc View Source Surname Gets or sets the surname of the customer. Declaration [JsonProperty(\"surname\")] public string Surname { get; set; } Property Value Type Description String The surname."
  },
  "api/Yort.LatitudePay.InStore.LatitudePayConfigurationRequest.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayConfigurationRequest.html",
    "title": "Class LatitudePayConfigurationRequest | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayConfigurationRequest Represents the options available when requesting configuration information from the LatitudePay API. Inheritance Object LatitudePayConfigurationRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayConfigurationRequest Properties | Improve this Doc View Source DisplayInModal If true the description field will not contain any reference to redirecting to the user to the LatitudePay application. Declaration [JsonProperty(\"displayInModal\")] public bool DisplayInModal { get; set; } Property Value Type Description Boolean true if the description shoud mention redirecting to LatitudePay, otherwise false . | Improve this Doc View Source TotalAmount Gets or sets the total purchase amount, inclusive of any shipping and tax components. Declaration [JsonProperty(\"totalAmount\")] public decimal TotalAmount { get; set; } Property Value Type Description Decimal The total purchase amount, inclusive of any shipping and tax components. See Also LatitudePayConfigurationResponse GetConfigurationAsync(LatitudePayConfigurationRequest)"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayAddress.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayAddress.html",
    "title": "Class LatitudePayAddress | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayAddress Represents a physical/postal address used for delivery/shipping or billing. Inheritance Object LatitudePayAddress Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayAddress Properties | Improve this Doc View Source AddressLine1 Gets or sets the first address line. Declaration [JsonProperty(\"addressLine1\")] public string AddressLine1 { get; set; } Property Value Type Description String The first address line. | Improve this Doc View Source AddressLine2 Gets or sets the second address line. Declaration [JsonProperty(\"addressLine2\")] public string AddressLine2 { get; set; } Property Value Type Description String The second address line. | Improve this Doc View Source CityTown Gets or sets the city or town. Declaration [JsonProperty(\"cityTown\")] public string CityTown { get; set; } Property Value Type Description String The city or town. | Improve this Doc View Source CountryCode Gets or sets the country code. Declaration [JsonProperty(\"countryCode\")] public string CountryCode { get; set; } Property Value Type Description String The country code. | Improve this Doc View Source Postcode Gets or sets the postcode. Declaration [JsonProperty(\"postcode\")] public string Postcode { get; set; } Property Value Type Description String The postcode. | Improve this Doc View Source State Gets or sets the state or province. Declaration [JsonProperty(\"state\")] public string State { get; set; } Property Value Type Description String The state or province. | Improve this Doc View Source Suburb Gets or sets the suburb. Declaration [JsonProperty(\"suburb\")] public string Suburb { get; set; } Property Value Type Description String The suburb."
  },
  "api/Yort.LatitudePay.InStore.LatitudePayClientConfiguration.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayClientConfiguration.html",
    "title": "Class LatitudePayClientConfiguration | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayClientConfiguration Instances of this class represent configuration options for ILatitudePayClient instances. The static members of this class provide global configuration common to all instances. Inheritance Object LatitudePayClientConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public sealed class LatitudePayClientConfiguration Constructors | Improve this Doc View Source LatitudePayClientConfiguration() Default contructor, creates a new instance. Declaration public LatitudePayClientConfiguration() Remarks Instances of this type become immmutable once passed to a LatitudePayClient instance. Trying to set properties after this has occurred will result in an InvalidOperationException . Properties | Improve this Doc View Source ApiKey Sets or returns the API key that identifies the merchant account to use with LatitudePay. Declaration public string ApiKey { get; set; } Property Value Type Description String Exceptions Type Condition InvalidOperationException Thrown if this property is modified after it has been passed to a LatitudePayClient instance. | Improve this Doc View Source ApiSecret Sets or returns the secret value used to access the LatitudePay API. Declaration public string ApiSecret { get; set; } Property Value Type Description String Exceptions Type Condition InvalidOperationException Thrown if this property is modified after it has been passed to a LatitudePayClient instance. | Improve this Doc View Source DefaultCurrency Sets or returns the default currency for new LatitudePayMoney instances where the currency is not explicitly provided. Declaration public static string DefaultCurrency { get; set; } Property Value Type Description String Remarks If this property is null or an empty string then AustralianDollars will be used as a default. | Improve this Doc View Source Environment Sets or returns the LatitudePay API environment to be used. Declaration public LatitudePayEnvironment Environment { get; set; } Property Value Type Description LatitudePayEnvironment Exceptions Type Condition InvalidOperationException Thrown if this property is modified after it has been passed to a LatitudePayClient instance. | Improve this Doc View Source HttpClient Sets or returns an HttpClient instance used to make calls to the LatitudePay API. If null/unset, the system will create it's own instance on first use. Declaration public HttpClient HttpClient { get; set; } Property Value Type Description HttpClient Remarks The library reserves the right to modify the provided client, such as setting default headers. A client can be shared amongst configuration object, but should not be shared/use outside of other LatitudePayClient instaces. The primary purpose of this method is to allow a client with injected handlers to be used. If you do not need to inject custom handlers, then leave this blank. Exceptions Type Condition InvalidOperationException Thrown if this property is modified after it has been passed to a LatitudePayClient instance. | Improve this Doc View Source MinimumRetries The minumum number of automatic retries to perform when a create transaction (order/refund/order reversal/refund reversal etc) times out. Declaration public int MinimumRetries { get; set; } Property Value Type Description Int32 Remarks This property defaults to a value of 2. A value of zero or less is allowed, in which case only the initial attempt will be made - no retries will be performed within the library and any error handling logic will need to be entirely implemented by the application. The library may attempt more retries than specified if the total time since the initial call is less than the (full, LatitudePay) recommended timeout for the endpoint being called. Exceptions Type Condition InvalidOperationException Thrown if this property is modified after it has been passed to a LatitudePayClient instance. | Improve this Doc View Source ProductName Sets or returns the product name that will be used as part of the user agent string when calling the LatitudePay API. Declaration public string ProductName { get; set; } Property Value Type Description String Remarks If null, empty string or only whitespace the name of the Yort.LatitudePay.Instore assembly being used will be substituted as a default. Exceptions Type Condition InvalidOperationException Thrown if this property is modified after it has been passed to a LatitudePayClient instance. | Improve this Doc View Source ProductVendor Sets or returns the name of the vendor that will be used as part of the user agent string when calling the LatitudePay API. Declaration public string ProductVendor { get; set; } Property Value Type Description String Remarks If null, empty string or only whitespace, \"Yort\" assembly being used will be substituted as a default. Exceptions Type Condition InvalidOperationException Thrown if this property is modified after it has been passed to a LatitudePayClient instance. | Improve this Doc View Source ProductVersion Sets or returns the version number of the ProductName name that will be used as part of the user agent string when calling the LatitudePay API. Declaration public string ProductVersion { get; set; } Property Value Type Description String Remarks If null, empty string or only whitespace the version of the Yort.LatitudePay.Instore assembly being used will be substituted as a default. Exceptions Type Condition InvalidOperationException Thrown if this property is modified after it has been passed to a LatitudePayClient instance. | Improve this Doc View Source RetryDelaySeconds Sets or returns the number of seconds to wait before attempting a retry. Declaration public int RetryDelaySeconds { get; set; } Property Value Type Description Int32 Remarks When a transactional call (CreateOrder/Refund etc) times out the system will perform a retry (based on the MinimumRetries setting). If that retry attempt returns a 409 conflict response indicating the first request is still in progres, then the system will wait this many seconds before the next retry. See https://docs.LatitudePay.com.au/instore-api-v1.html#distributed-state-considerations and https://docs.LatitudePay.com.au/instore-api-v1.html#create-order for more details. The minimum value is 5 seconds. Any value less than 5 seconds will be ignored, and a 5 second delay will occur instead. Exceptions Type Condition InvalidOperationException Thrown if this property is modified after it has been passed to a LatitudePayClient instance. | Improve this Doc View Source SystemClock Sets or returns an implementation of ILatitudePaySystemClock that will be used by the library to determine the current date and time. Declaration public static ILatitudePaySystemClock SystemClock { get; set; } Property Value Type Description ILatitudePaySystemClock Remarks If not clock is explicitly set, or if the property is set to null, then DefaultInstance will be used (and returned as the current value of the property). This property can be used to provide a mocked clock for unit testing, or to provide a clock adjusted by a calculated offset via an NTP client etc. if the system clock cannot be relied upon for accuracy. This is a static property and the value set here affects all clients/objects from the Yort.LatitudePay.InStore API unless otherwise specified."
  },
  "api/Yort.LatitudePay.InStore.LatitudePayPurchaseStatusResponse.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayPurchaseStatusResponse.html",
    "title": "Class LatitudePayPurchaseStatusResponse | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayPurchaseStatusResponse Represents the status of a payment plan as returned by a GetPurchaseStatusAsync(LatitudePayPurchaseStatusRequest) request. Inheritance Object LatitudePayPurchaseStatusResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayPurchaseStatusResponse Properties | Improve this Doc View Source Message Gets or sets a human readable message related to the status of this payment plan. Declaration [JsonProperty(\"message\")] public string Message { get; set; } Property Value Type Description String The message. | Improve this Doc View Source Status Gets or sets the status of the payment plan. Declaration [JsonProperty(\"status\")] public string Status { get; set; } Property Value Type Description String The status. See Also LatitudePayConstants | Improve this Doc View Source Token Gets or sets the payment token. Declaration [JsonProperty(\"token\")] public string Token { get; set; } Property Value Type Description String The token. See Also LatitudePayPurchaseStatusRequest LatitudePayClient GetPurchaseStatusAsync(LatitudePayPurchaseStatusRequest)"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayEnvironment.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayEnvironment.html",
    "title": "Enum LatitudePayEnvironment | Yort.LatitudePay.InStore",
    "keywords": "Enum LatitudePayEnvironment A enum providing a list of environments for the LatitudePay API. Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public enum LatitudePayEnvironment Fields Name Description Production The live/production API. Uat The test/sandbox API."
  },
  "api/Yort.LatitudePay.InStore.LatitudePayConfigurationResponse.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayConfigurationResponse.html",
    "title": "Class LatitudePayConfigurationResponse | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayConfigurationResponse Represents the response from a GetConfigurationAsync(LatitudePayConfigurationRequest) call. Inheritance Object LatitudePayConfigurationResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayConfigurationResponse Properties | Improve this Doc View Source Availability Gets or sets a collection of Availability instances specifying currencies and countries usable with the current merchant account. Declaration public IEnumerable<LatitudePayAvailability> Availability { get; set; } Property Value Type Description IEnumerable < LatitudePayAvailability > The availability details for the current merchant account. | Improve this Doc View Source Description Gets or setsa description of a payment plan using the TotalAmount specified. Declaration public string Description { get; set; } Property Value Type Description String The supposed payment plan description. | Improve this Doc View Source MaximumAmount Gets or sets the maximum purchase amount. Declaration public decimal MaximumAmount { get; set; } Property Value Type Description Decimal The maximum purchase amount. | Improve this Doc View Source MinimumAmount Gets or sets the minimum purchase amount. Declaration public decimal MinimumAmount { get; set; } Property Value Type Description Decimal The minimum purchase amount. | Improve this Doc View Source Name Gets or sets the name of the service (LatitudePay/GenoaPay etc). Declaration public string Name { get; set; } Property Value Type Description String The service name. See Also GetConfigurationAsync(LatitudePayConfigurationRequest) LatitudePayConfigurationRequest"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayCreatePosPurchaseResponse.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayCreatePosPurchaseResponse.html",
    "title": "Class LatitudePayCreatePosPurchaseResponse | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayCreatePosPurchaseResponse Represents a response from a CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) request. Inheritance Object LatitudePayCreatePosPurchaseResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayCreatePosPurchaseResponse Properties | Improve this Doc View Source CommissionAmount Gets or sets the dollar figure of the fees charged to the merchant by LatitudePay for this payment plan. Declaration [JsonProperty(\"commissionAmount\")] public decimal CommissionAmount { get; set; } Property Value Type Description Decimal The commission amount. | Improve this Doc View Source ExpiryDate Gets or sets the last date and time at which the customer can approve this payment plan. Declaration [JsonProperty(\"expiryDate\")] public DateTimeOffset ExpiryDate { get; set; } Property Value Type Description DateTimeOffset The expiry date. | Improve this Doc View Source Reference Gets or sets the LatitudePay reference for this payment plan. Declaration [JsonProperty(\"reference\")] public string Reference { get; set; } Property Value Type Description String The LatitudePay reference. | Improve this Doc View Source StatusUrl Gets or sets a URL that can be called to check the payment status. Declaration [JsonProperty(\"statusUrl\")] public Uri StatusUrl { get; set; } Property Value Type Description Uri The status URL. Remarks Provided for completeness but typically not used with this library as you use GetPurchaseStatusAsync(LatitudePayPurchaseStatusRequest) method with the payment token. | Improve this Doc View Source Token Gets or sets the payment token for the plan created. Declaration [Required] [JsonProperty(\"token\")] public string Token { get; set; } Property Value Type Description String The payment token. See Also LatitudePayCreatePosPurchaseRequest LatitudePayClient"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayAvailability.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayAvailability.html",
    "title": "Class LatitudePayAvailability | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayAvailability Represents details of an available country & currency combination that can be used with the current LatitudePay account. Inheritance Object LatitudePayAvailability Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayAvailability Remarks Returns as part of LatitudePayConfigurationResponse . Properties | Improve this Doc View Source Country Gets or sets the name of a country associated with this account. Declaration [JsonProperty(\"country\")] public string Country { get; set; } Property Value Type Description String The country name. | Improve this Doc View Source CountryCode Gets or sets the ISO code of a country associated with this account. Declaration [JsonProperty(\"countryCode\")] public string CountryCode { get; set; } Property Value Type Description String The country code. | Improve this Doc View Source Currency Gets or sets the ISO currency code associated with this account. Declaration [JsonProperty(\"currency\")] public string Currency { get; set; } Property Value Type Description String The currency. | Improve this Doc View Source CurrencySymbol Gets or sets the symbol (i.e $) used with the currency associated with this account. Declaration [JsonProperty(\"currencySymbol\")] public string CurrencySymbol { get; set; } Property Value Type Description String The currency symbol. See Also LatitudePayConfigurationRequest GetConfigurationAsync ( LatitudePayConfigurationRequest )"
  },
  "api/Yort.LatitudePay.InStore.LatitudePayPurchaseStatusRequest.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayPurchaseStatusRequest.html",
    "title": "Class LatitudePayPurchaseStatusRequest | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayPurchaseStatusRequest Represents a request to obtain the status of a payment plan created via CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) . Inheritance Object LatitudePayPurchaseStatusRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayPurchaseStatusRequest Properties | Improve this Doc View Source PaymentPlanToken Gets or sets the payment token for the plan. Required. Declaration [Required] [JsonProperty(\"paymentPlanToken\")] public string PaymentPlanToken { get; set; } Property Value Type Description String The payment plan token."
  },
  "api/Yort.LatitudePay.InStore.LatitudePayAuthToken.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayAuthToken.html",
    "title": "Class LatitudePayAuthToken | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayAuthToken Represents a token returned from the LatitudePay Authorization endpoint. Inheritance Object LatitudePayAuthToken Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public class LatitudePayAuthToken Remarks This class is used internally by LatitudePayClient which will automatically request and renew tokens as required. It is not expected to be used directly by application code. Properties | Improve this Doc View Source ExpiryDate Gets or sets the date and time at which this token expires. Declaration [JsonProperty(\"expiryDate\")] public DateTimeOffset ExpiryDate { get; set; } Property Value Type Description DateTimeOffset The expiry date and time. | Improve this Doc View Source Token Gets or sets the authorization token return by LatitudePay. Declaration [JsonProperty(\"authToken\")] public string Token { get; set; } Property Value Type Description String The token. Methods | Improve this Doc View Source IsValid(ILatitudePaySystemClock) Returns a boolean indicating if this Token value should currently be usable with the LatitudePay API. Declaration public bool IsValid(ILatitudePaySystemClock clock) Parameters Type Name Description ILatitudePaySystemClock clock An instance implementing ILatitudePaySystemClock used to determine the current time. Returns Type Description Boolean true if the specified clock is valid; otherwise, false . Remarks Returns true if clock is not empty and the current time (using clock ) is more than one minute before ExpiryDate . If clock is null then DefaultInstance is used."
  },
  "api/Yort.LatitudePay.InStore.LatitudePayClient.html": {
    "href": "api/Yort.LatitudePay.InStore.LatitudePayClient.html",
    "title": "Class LatitudePayClient | Yort.LatitudePay.InStore",
    "keywords": "Class LatitudePayClient The primary class used to integrate to the LatitudePay API. Inheritance Object LatitudePayClient Implements ILatitudePayClient IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.LatitudePay.InStore Assembly : Yort.LatitudePay.InStore.dll Syntax public sealed class LatitudePayClient : ILatitudePayClient, IDisposable Remarks Instances of this class should be reused between requests. If working in a single POS, create a copy on startup or first use and then re-use for subsequent payments. Dispose only when you're done with the instance completely, such as on shutdown or if about to create a new instance with alternate configuration. If working in a payment service/gateway or web POS handling multiple lanes, then create a pool of instances (one for each lane) and re-use as appropriate. Instances of this class should be thread safe, multiple calls for the same or different payments through the same instance should work as expected. Constructors | Improve this Doc View Source LatitudePayClient(LatitudePayClientConfiguration) Initializes a new instance of the LatitudePayClient class. Declaration public LatitudePayClient(LatitudePayClientConfiguration configuration) Parameters Type Name Description LatitudePayClientConfiguration configuration A LatitudePayClientConfiguration instance containing information required to connect to the LatitudePay API. Exceptions Type Condition ArgumentNullException Thrown if configuration is null, or if ApiSecret is null. ArgumentException Thrown if ApiSecret is an empty string or contains only whitespace. See Also LatitudePayClientConfiguration ILatitudePayClient Methods | Improve this Doc View Source CancelPurchaseAsync(LatitudePayCancelPurchaseRequest) Cancels a (pending) payment plan previously requested via CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) . Declaration public Task<LatitudePayCancelPurchaseResponse> CancelPurchaseAsync(LatitudePayCancelPurchaseRequest request) Parameters Type Name Description LatitudePayCancelPurchaseRequest request A LatitudePayCancelPurchaseRequest containing the token of the payment plan to cancel. Returns Type Description Task < LatitudePayCancelPurchaseResponse > An instance of a LatitudePayCancelPurchaseResponse indicating if the cancellation was successful. Remarks This only cancels pending/unapproved payment plans. If a plan has been accepted/approved you must refund it instead of cancel it. Exceptions Type Condition ArgumentNullException Thrown if request or any of it's required sub-properties are null. ArgumentOutOfRangeException Thrown if any sub-properties of request are outside the allowed range, i.e negative price. ArgumentException Thrown if any sub-properties of request are invalid for a reason other than being null or outside of a valid range. ObjectDisposedException Thrown if Dispose() has been called on this instance. UnauthorizedAccessException Thrown if the system is unable to obtain an authorisation token from the API (see the inner exception for details). HttpRequestException Thrown if an error occurs making the request to the API. See Also CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) CreateRefundAsync(LatitudePayCreateRefundRequest) | Improve this Doc View Source CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) Creates a new 'payment plan'. Declaration public Task<LatitudePayCreatePosPurchaseResponse> CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest request) Parameters Type Name Description LatitudePayCreatePosPurchaseRequest request A LatitudePayCreatePosPurchaseRequest instance specifying options for the payment plan to be created. Returns Type Description Task < LatitudePayCreatePosPurchaseResponse > A LatitudePayCreatePosPurchaseResponse instance containing details of the pending payment plan. Exceptions Type Condition ArgumentNullException Thrown if request or any of it's required sub-properties are null. ArgumentOutOfRangeException Thrown if any sub-properties of request are outside the allowed range, i.e negative price. ArgumentException Thrown if any sub-properties of request are invalid for a reason other than being null or outside of a valid range. ObjectDisposedException Thrown if Dispose() has been called on this instance. UnauthorizedAccessException Thrown if the system is unable to obtain an authorisation token from the API (see the inner exception for details). HttpRequestException Thrown if an error occurs making the request to the API. See Also GetPurchaseStatusAsync(LatitudePayPurchaseStatusRequest) CancelPurchaseAsync(LatitudePayCancelPurchaseRequest) CreateRefundAsync(LatitudePayCreateRefundRequest) | Improve this Doc View Source CreateRefundAsync(LatitudePayCreateRefundRequest) Refunds a previously approved payment plan. Declaration public Task<LatitudePayCreateRefundResponse> CreateRefundAsync(LatitudePayCreateRefundRequest request) Parameters Type Name Description LatitudePayCreateRefundRequest request A LatitudePayCreateRefundRequest instance containing details of the refund and payment plan to refund against. Returns Type Description Task < LatitudePayCreateRefundResponse > A LatitudePayCreateRefundResponse instance indicating if the refund was successful and details of the refund created. Remarks You can only refund a previously accepted payment plan. Use CancelPurchaseAsync(LatitudePayCancelPurchaseRequest) to cancel a payment plan that is pending. A refund can be full or partial, and multiple partial refunds can be made. You can only refund up to the total amount of the original payment plan, across all refunds. Exceptions Type Condition ArgumentNullException Thrown if request or any of it's required sub-properties are null. ArgumentOutOfRangeException Thrown if any sub-properties of request are outside the allowed range, i.e negative price. ArgumentException Thrown if any sub-properties of request are invalid for a reason other than being null or outside of a valid range. ObjectDisposedException Thrown if Dispose() has been called on this instance. UnauthorizedAccessException Thrown if the system is unable to obtain an authorisation token from the API (see the inner exception for details). HttpRequestException Thrown if an error occurs making the request to the API. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source GetConfigurationAsync(LatitudePayConfigurationRequest) Gets configuration information for the current merchant account, specifying the supported currency, minimum and maximum purchase values etc. Declaration public Task<LatitudePayConfigurationResponse> GetConfigurationAsync(LatitudePayConfigurationRequest request) Parameters Type Name Description LatitudePayConfigurationRequest request A LatitudePayConfigurationRequest that specifies options for the data returned. Returns Type Description Task < LatitudePayConfigurationResponse > A LatitudePayConfigurationResponse instance. Exceptions Type Condition ArgumentNullException Thrown if request is null. ObjectDisposedException Thrown if Dispose() has been called on this instance. UnauthorizedAccessException Thrown if the system is unable to obtain an authorisation token from the API (see the inner exception for details). HttpRequestException Thrown if an error occurs making the request to the API. | Improve this Doc View Source GetPurchaseStatusAsync(LatitudePayPurchaseStatusRequest) Gets the status of a payment plan previously requested via CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) . Declaration public Task<LatitudePayPurchaseStatusResponse> GetPurchaseStatusAsync(LatitudePayPurchaseStatusRequest request) Parameters Type Name Description LatitudePayPurchaseStatusRequest request A LatitudePayPurchaseStatusRequest instance containing the token of the payment plan who's status should be queried. Returns Type Description Task < LatitudePayPurchaseStatusResponse > A LatitudePayPurchaseStatusResponse instance containing the status and other details of the plan. Exceptions Type Condition ArgumentNullException Thrown if request or any of it's required sub-properties are null. ArgumentOutOfRangeException Thrown if any sub-properties of request are outside the allowed range, i.e negative price. ArgumentException Thrown if any sub-properties of request are invalid for a reason other than being null or outside of a valid range. ObjectDisposedException Thrown if Dispose() has been called on this instance. UnauthorizedAccessException Thrown if the system is unable to obtain an authorisation token from the API (see the inner exception for details). HttpRequestException Thrown if an error occurs making the request to the API. See Also CreatePosPurchaseAsync(LatitudePayCreatePosPurchaseRequest) CancelPurchaseAsync(LatitudePayCancelPurchaseRequest) Implements ILatitudePayClient System.IDisposable See Also ILatitudePayClient"
  }
}